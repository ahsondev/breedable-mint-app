{"version":3,"sources":["pages/Admin/Dashboard/Dashboard.tsx","pages/Admin/Login/Login.tsx","utils/config.ts","utils/web3_api.ts","components/Loader.tsx","pages/Home/Home.tsx","utils/api.ts","utils/helper.ts","routes/index.ts","pages/Mint/Mint.tsx","App.tsx","reportWebVitals.ts","reducers/sample.ts","store.ts","index.tsx"],"names":["Dashboard","className","style","padding","type","margin","Login","useState","email","password","login","setLogin","handleChange","e","prev","target","name","value","onSubmit","autoComplete","onChange","required","placeholder","env","network","apiUrl","web3","contract","config","appID","networks","mainnet","chainId","alchemyHttpUrl","process","alchemyWssUrl","rinkeby","kovan","actionTypes","wnd","window","BrainDance","nativeContract","addr","mintPricePerToken","tx","from","to","contractConfig","contractAddress","data","this","methods","mint","encodeABI","eth","sendTransaction","heroId1","heroId2","tokenUri","mintBreedToken","address","withdrawAll","setPause","_addresses","addWhiteLists","removeWhiteLists","setStarttime","tokenUris","mintUnsoldTokens","connectToWallet","a","ethereum","request","method","params","createAlchemyWeb3","console","log","BrainDanceNft","Contract","getEthBalance","Promise","resolve","reject","getBalance","then","_balance","balance","utils","fromWei","err","Loader","props","speedMultiplier","size","color","Home","metamaskAccount","setMetamaskAccount","price","setPrice","loading","setLoading","setWeb3","setContract","contractBalance","setContractBalance","setHeroId1","setHeroId2","testAddress","isWhiteList","setIsWhiteList","paused","setPaused","startTime","setStartTime","hero","setHero","connectMetamask","connectRes","account","selectedAddress","MINT_PRICE","call","res","bPaused","Number","getChildren","useEffect","events","MintedNewNFT","error","event","msg","returnValues","tokenId","padStart","NotificationManager","info","BreededNewNFT","PauseEvent","pause","handleSetPause","bAdd","on","hash","receipt","confirmationNumber","ex","handleAddWhiteList","addWhiteList","onClick","mintNFT","breedNFT","withdrawEth","String","moment","Date","format","JSON","stringify","instance","axios","create","baseURL","headers","common","Accept","getStorageItem","key","defaultVal","parse","ciphertext","bytes","CryptoJS","AES","decrypt","toString","enc","Utf8","localStorage","getItem","routes","path","component","loggedIn","setLoggedIn","username","setUsername","isLoggedIn","profile","queryString","location","search","oauth_token","oauth_verifier","code","api","post","App","map","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","sample","state","action","payload","store","createStore","combineReducers","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97de3382.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport './Dashboard.scoped.scss'\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <div className='dashboard-page'>\r\n      <h2>Set whitelist</h2>\r\n      <div className=\"d-flex w-100\">\r\n        <textarea className=\"w-50\" />\r\n        <div className=\"w-50\" style={{padding: '0 0 0 20px'}}>\r\n          <button type='button' className='d-block w-100' style={{margin: '0 0 10px 0'}}>Set Whitelist</button>\r\n          <button type='button' className='d-block w-100'>Set Starttime</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport './Login.scoped.scss'\r\n\r\nconst Login = () => {\r\n  const [login, setLogin] = useState({\r\n    email: '',\r\n    password: ''\r\n  })\r\n\r\n  const handleChange = (e: any) => {\r\n    setLogin(prev => ({\r\n      ...prev,\r\n      [e.target.name]: e.target.value\r\n    }))\r\n  }\r\n\r\n  const handleSubmit = (e: any) => {\r\n  }\r\n  \r\n  return (\r\n    <div className='login-page'>\r\n      <form className='login-form' onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <h1>Admin Login to Brain Dance</h1>\r\n        <div className=\"content\">\r\n          <div className=\"d-flex w-100\">\r\n            <input type=\"email\" className=\"w-50\" name='email' value={login.email} onChange={handleChange} required placeholder=\"Email\" />\r\n            <input type=\"password\" className=\"w-50\" name='password' value={login.password} onChange={handleChange} required placeholder=\"Password\" />\r\n          </div>\r\n          <div className=\"d-flex w-100\">\r\n            <button type='submit'>Sign In</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","let env = {}\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  env = {\r\n    network: 'rinkeby',\r\n    apiUrl: 'http://127.0.0.1:4000/api'\r\n  }\r\n} else {\r\n  env = {\r\n    network: 'mainnet',\r\n    apiUrl: ''\r\n  }\r\n}\r\n\r\nconst config = {\r\n  ...env,\r\n  appID: 'BrainDance',\r\n  networks: {\r\n    mainnet: {\r\n      chainId: '0x1',\r\n      alchemyHttpUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_HTTP_URL,\r\n      alchemyWssUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_WSS_URL\r\n    },\r\n    rinkeby: {\r\n      chainId: '0x4',\r\n      alchemyHttpUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_HTTP_URL,\r\n      alchemyWssUrl: process.env.REACT_APP_ALCHEMY_RINKEBY_WSS_URL\r\n    },\r\n    kovan: {\r\n      chainId: '0x2A',\r\n      alchemyHttpUrl: process.env.REACT_APP_ALCHEMY_KOVAN_HTTP_URL,\r\n      alchemyWssUrl: process.env.REACT_APP_ALCHEMY_KOVAN_WSS_URL\r\n    }\r\n  },\r\n} as any\r\n\r\nexport const actionTypes = {\r\n  SAMPLE_ACTION: 'SAMPLE_ACTION'\r\n}\r\n\r\nexport default config\r\n","import contractConfig from 'contracts/config.json'\r\nimport BrainDanceNft from 'contracts/BrainDanceNft.json'\r\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3'\r\nimport Web3 from 'web3'\r\nimport config from './config'\r\n\r\nconst wnd = window as any\r\n\r\nlet web3: any\r\n\r\nexport class BrainDance {\r\n  nativeContract: any = null\r\n\r\n  mintNFT(addr: string, mintPricePerToken: number) {\r\n    // const priceWei = web3.utils.toWei(mintPricePerToken.toString(), 'ether') // Convert to wei value\r\n    // console.log('mintPricePerToken: ', mintPricePerToken, priceWei)\r\n    // this.nativeContract.methods.requestRandomNFT(addr, amount).send({\r\n    //   from: addr,\r\n    //   value: priceWei,\r\n    // }).then((res: any) => {\r\n    //   resolve(res)\r\n    // }, (err: any) => {\r\n    //   reject(err)\r\n    // })\r\n\r\n    // real gas = gas * maxPriorityFeePerGas / 10^18\r\n    const tx = {\r\n      from: addr,\r\n      to: contractConfig.contractAddress,\r\n      // gas: 50000, // 500 000 gas\r\n      value: mintPricePerToken,\r\n      // maxPriorityFeePerGas: 1999999987, // 199...987 wei\r\n      data: this.nativeContract.methods.mint().encodeABI(),\r\n    }\r\n\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n\r\n  breedNFT(addr: string, heroId1: number, heroId2: number, tokenUri: string) {\r\n    const tx = {\r\n      from: addr,\r\n      to: contractConfig.contractAddress,\r\n      data: this.nativeContract.methods.mintBreedToken(tokenUri, heroId1, heroId2).encodeABI(),\r\n    }\r\n\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n\r\n  withdrawEth(address: string) {\r\n    const tx = {\r\n      from: address,\r\n      to: contractConfig.contractAddress,\r\n      data: this.nativeContract.methods.withdrawAll().encodeABI(),\r\n    }\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n\r\n  setPause(address: string, value: boolean) {\r\n    const tx = {\r\n      from: address,\r\n      to: contractConfig.contractAddress,\r\n      data: this.nativeContract.methods.setPause(value).encodeABI(),\r\n    }\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n\r\n  addWhiteList(address: string, _addresses: string[]) {\r\n    const tx = {\r\n      from: address,\r\n      to: contractConfig.contractAddress,\r\n      data: this.nativeContract.methods.addWhiteLists(_addresses).encodeABI(),\r\n    }\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n\r\n  removeWhiteList(address: string, _addresses: string[]) {\r\n    const tx = {\r\n      from: address,\r\n      to: contractConfig.contractAddress,\r\n      data: this.nativeContract.methods.removeWhiteLists(_addresses).encodeABI(),\r\n    }\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n\r\n  setStarttime(address: string) {\r\n    const tx = {\r\n      from: address,\r\n      to: contractConfig.contractAddress,\r\n      data: this.nativeContract.methods.setStarttime().encodeABI(),\r\n    }\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n\r\n  mintUnsoldTokens(address: string, tokenUris: string[]) {\r\n    const tx = {\r\n      from: address,\r\n      to: contractConfig.contractAddress,\r\n      data: this.nativeContract.methods.mintUnsoldTokens(address, tokenUris).encodeABI(),\r\n    }\r\n    return web3.eth.sendTransaction(tx)\r\n  }\r\n}\r\n\r\nlet contract: BrainDance\r\n\r\nexport const connectToWallet = async () => {\r\n  try {\r\n    if (wnd.ethereum) {\r\n      await wnd.ethereum.request({ method: 'eth_requestAccounts' });\r\n      await wnd.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: config.networks[config.network].chainId }],\r\n        })\r\n\r\n      web3 = createAlchemyWeb3(config.networks[config.network].alchemyWssUrl)\r\n      // web3 = new Web3('wss://eth-kovan.alchemyapi.io/v2/IROGTMfjIr-d3od_IUeYNDzpSVbMHQZY')\r\n      console.log(BrainDanceNft, contractConfig.contractAddress)\r\n      contract = new BrainDance()\r\n      contract.nativeContract = new web3.eth.Contract(\r\n        BrainDanceNft,\r\n        contractConfig.contractAddress\r\n      )\r\n      return {\r\n        web3,\r\n        contract,\r\n      }\r\n    }\r\n  } catch (switchError) {\r\n    console.log(switchError)\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const getEthBalance = (addr: string) =>\r\n  new Promise((resolve: (val: number) => void, reject: any) => {\r\n    web3.eth.getBalance(addr).then(\r\n      (_balance: any) => {\r\n        const balance = web3.utils.fromWei(_balance, 'ether')\r\n        resolve(balance)\r\n      },\r\n      (err: any) => {}\r\n    )\r\n  })\r\n","import ClipLoader from 'react-spinners/ClipLoader'\r\n\r\ninterface PropsType {}\r\n\r\nconst Loader = (props: PropsType) => {\r\n  return (\r\n    <div className='screen-overlay'>\r\n      <ClipLoader\r\n        speedMultiplier={0.5}\r\n        size={60}\r\n        color='var(--primary-color)'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import { useEffect, useState } from 'react'\r\nimport { BrainDance, connectToWallet, getEthBalance } from 'utils/web3_api'\r\nimport { NotificationManager } from 'components/Notification'\r\nimport Loader from 'components/Loader'\r\nimport contractConfig from 'contracts/config.json'\r\nimport moment from 'moment'\r\n\r\nconst wnd = window as any\r\n\r\ninterface Props {}\r\n\r\nconst Home = (props: Props) => {\r\n  const [metamaskAccount, setMetamaskAccount] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [loading, setLoading] = useState(false)\r\n  const [web3, setWeb3] = useState<any>(null)\r\n  const [contract, setContract] = useState<BrainDance>(new BrainDance())\r\n  const [contractBalance, setContractBalance] = useState(0)\r\n\r\n  // Breeding\r\n  const [heroId1, setHeroId1] = useState(0)\r\n  const [heroId2, setHeroId2] = useState(0)\r\n\r\n  const testAddress = '0xA5DBC34d69B745d5ee9494E6960a811613B9ae32'\r\n  const [isWhiteList, setIsWhiteList] = useState(false)\r\n  const [paused, setPaused] = useState(false)\r\n  const [startTime, setStartTime] = useState(0)\r\n\r\n  // hero\r\n  const [hero, setHero] = useState<any>(null)\r\n\r\n\r\n  const connectMetamask = async (e: any) => {\r\n    const connectRes = await connectToWallet()\r\n    console.log(connectRes)\r\n    if (connectRes) {\r\n      setWeb3(connectRes.web3)\r\n      setContract(connectRes.contract)\r\n      const account = wnd.ethereum.selectedAddress\r\n      setMetamaskAccount(account)\r\n\r\n      connectRes.contract.nativeContract.methods.MINT_PRICE().call().then((res: any) => setPrice(res), (err: any) => console.log(err))\r\n      connectRes.contract.nativeContract.methods.isWhiteList(testAddress).call().then((res: any) => setIsWhiteList(res), (err: any) => console.log(err))\r\n      connectRes.contract.nativeContract.methods.bPaused().call().then((res: any) => setPaused(res as boolean), (err: any) => console.log(err))\r\n      connectRes.contract.nativeContract.methods.startTime().call().then((res: any) => setStartTime(Number(res)), (err: any) => console.log(err))\r\n      connectRes.contract.nativeContract.methods.getChildren(10101).call().then((res: any) => setHero(res), (err: any) => console.log(err))\r\n      // connectRes.contract.nativeContract.methods.getChildrenWithParent(10102, 10101).call().then((res: any) => setHero(res), (err: any) => console.log(err))\r\n      getEthBalance(contractConfig.contractAddress).then((res: any) => setContractBalance(res), (err: any) => console.log(err))\r\n      console.log(\"Connected ...\")\r\n      console.log(\"Connected Address: \", account)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    connectMetamask(null)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // NotificationManager.success('Success message', 'Title here')\r\n    if (contract?.nativeContract) {\r\n      contract.nativeContract.events.MintedNewNFT({}, (error: any, event: any) => {\r\n        console.log('event: ', error, event)\r\n        if (error) {\r\n          return\r\n        }\r\n        \r\n        const msg = `Token #${event.returnValues.tokenId.padStart(5, \"0\")} minted`\r\n        NotificationManager.info(msg, 'Minted new NFT')\r\n      })\r\n\r\n      contract.nativeContract.events.BreededNewNFT({}, (error: any, event: any) => {\r\n        console.log('event: ', error, event)\r\n        if (error) {\r\n          return\r\n        }\r\n        \r\n        const msg = `Token #${event.returnValues.tokenId.padStart(5, \"0\")} minted`\r\n        NotificationManager.info(msg, 'Breeded new NFT')\r\n      })\r\n\r\n      contract.nativeContract.events.PauseEvent({}, (error: any, event: any) => {\r\n        console.log('event: ', error, event)\r\n        if (error) {\r\n          return\r\n        }\r\n        \r\n        const pause = event.returnValues.pause\r\n        const msg = pause ? \"Paused minting\" : \"Resumed minting\"\r\n        NotificationManager.info(msg, 'Paused new NFT')\r\n      })\r\n    }\r\n  }, [contract])\r\n\r\n\r\n  const handleMint = () => {\r\n    setLoading(true)\r\n    try {\r\n      contract.mintNFT(metamaskAccount, price).on('transactionHash', function(hash: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('receipt', function(receipt: any) {\r\n        console.log(\"receipt\", receipt)\r\n        setLoading(false)\r\n      })\r\n      .on('confirmation', function(confirmationNumber: any, receipt: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('error', (err: any) => {\r\n        setLoading(false)\r\n        console.error(err)\r\n      }); // If a out of gas error, the second parameter is the receipt.\r\n    } catch (ex) {\r\n      setLoading(false)\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  const handleBreed = () => {\r\n    setLoading(true)\r\n    try {\r\n      const tokenUri = \"\"\r\n      contract.breedNFT(metamaskAccount, heroId1, heroId2, tokenUri).on('transactionHash', function(hash: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('receipt', function(receipt: any) {\r\n        console.log(\"receipt\", receipt)\r\n        setLoading(false)\r\n      })\r\n      .on('confirmation', function(confirmationNumber: any, receipt: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('error', (err: any) => {\r\n        setLoading(false)\r\n        console.error(err)\r\n      }); // If a out of gas error, the second parameter is the receipt.\r\n    } catch (ex) {\r\n      setLoading(false)\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  const handleWithdraw = () => {\r\n    setLoading(true)\r\n    try {\r\n      contract.withdrawEth(metamaskAccount).on('transactionHash', function(hash: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('receipt', function(receipt: any) {\r\n        console.log(\"receipt\", receipt)\r\n        setLoading(false)\r\n      })\r\n      .on('confirmation', function(confirmationNumber: any, receipt: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('error', (err: any) => {\r\n        setLoading(false)\r\n        console.error(err)\r\n      }); // If a out of gas error, the second parameter is the receipt.\r\n    } catch (ex) {\r\n      setLoading(false)\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  const handleSetPause = (bAdd: boolean) => {\r\n    setLoading(true)\r\n    try {\r\n      contract.setPause(metamaskAccount, bAdd).on('transactionHash', function(hash: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('receipt', function(receipt: any) {\r\n        console.log(\"receipt\", receipt)\r\n        setLoading(false)\r\n      })\r\n      .on('confirmation', function(confirmationNumber: any, receipt: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('error', (err: any) => {\r\n        setLoading(false)\r\n        console.error(err)\r\n      }); // If a out of gas error, the second parameter is the receipt.\r\n    } catch (ex) {\r\n      setLoading(false)\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  const handleAddWhiteList = (bAdd: boolean) => {\r\n    setLoading(true)\r\n    try {\r\n      contract.addWhiteList(metamaskAccount, [testAddress]).on('transactionHash', function(hash: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('receipt', function(receipt: any) {\r\n        console.log(\"receipt\", receipt)\r\n        setLoading(false)\r\n      })\r\n      .on('confirmation', function(confirmationNumber: any, receipt: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('error', (err: any) => {\r\n        setLoading(false)\r\n        console.error(err)\r\n      }); // If a out of gas error, the second parameter is the receipt.\r\n    } catch (ex) {\r\n      setLoading(false)\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  const handleStartTime = () => {\r\n    setLoading(true)\r\n    try {\r\n      contract.setStarttime(metamaskAccount).on('transactionHash', function(hash: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('receipt', function(receipt: any) {\r\n        console.log(\"receipt\", receipt)\r\n        setLoading(false)\r\n      })\r\n      .on('confirmation', function(confirmationNumber: any, receipt: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('error', (err: any) => {\r\n        setLoading(false)\r\n        console.error(err)\r\n      }); // If a out of gas error, the second parameter is the receipt.\r\n    } catch (ex) {\r\n      setLoading(false)\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  const handleMintUnsold = () => {\r\n    setLoading(true)\r\n    try {\r\n      contract.mintUnsoldTokens(metamaskAccount, []).on('transactionHash', function(hash: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('receipt', function(receipt: any) {\r\n        console.log(\"receipt\", receipt)\r\n        setLoading(false)\r\n      })\r\n      .on('confirmation', function(confirmationNumber: any, receipt: any) {\r\n        setLoading(false)\r\n      })\r\n      .on('error', (err: any) => {\r\n        setLoading(false)\r\n        console.error(err)\r\n      }); // If a out of gas error, the second parameter is the receipt.\r\n    } catch (ex) {\r\n      setLoading(false)\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='home-page'>\r\n      {loading && <Loader />}\r\n      <div>\r\n        <button type='button' onClick={handleMint}>Mint</button>\r\n      </div>\r\n      <div>\r\n        <span>heroId1</span>\r\n        <input type=\"text\" value={heroId1} onChange={(e: any) => setHeroId1(Number(e.target.value))} />\r\n        <span>heroId2</span>\r\n        <input type=\"text\" value={heroId2} onChange={(e: any) => setHeroId2(Number(e.target.value))} />\r\n        <button type='button' onClick={handleBreed}>Breed</button>\r\n      </div>\r\n      <div>\r\n        <button type='button' onClick={handleWithdraw}>Winthdraw</button>\r\n      </div>\r\n      <div>Price: {price}</div>\r\n      <div>contractBalance: {contractBalance}</div>\r\n      <div>\r\n        <button type='button' onClick={e => handleSetPause(true)}>setPause</button>\r\n        <button type='button' onClick={e => handleSetPause(false)}>removePause</button>\r\n      </div>\r\n      <div>pause: {String(paused)}</div>\r\n      <div>\r\n        <button type='button' onClick={handleStartTime}>setStartTime</button>\r\n      </div>\r\n      <div>startTime: {moment(new Date(startTime * 1000)).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\r\n      <div>\r\n        <button type='button' onClick={e => handleAddWhiteList(true)}>addWhiteList</button>\r\n        <button type='button' onClick={e => handleAddWhiteList(false)}>removeWhiteList</button>\r\n      </div>\r\n      <div>IsWhiteList: {String(isWhiteList)}</div>\r\n      <div>hero: {JSON.stringify(hero)}</div>\r\n      <div>\r\n        <button type='button' onClick={handleMintUnsold}>mint unsold</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import axios from 'axios'\r\nimport config from './config'\r\n\r\nconst instance = axios.create({\r\n  baseURL: config.apiUrl,\r\n  params: {},\r\n  headers: {\r\n    common: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n  },\r\n})\r\n\r\nexport default instance\r\n","import CryptoJS from 'crypto-js'\r\nimport config from './config'\r\n\r\nexport const getQueryValue = (name: string) => {\r\n  let url = window.location.href + ''\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\r\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\r\n    results = regex.exec(url)\r\n  if (!results) return null\r\n  if (!results[2]) return ''\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\r\n}\r\n\r\n// ---------------------- crypto ------------------------------------------\r\nexport const encrypt = (data: any) =>\r\n  CryptoJS.AES.encrypt(JSON.stringify(data), process.env.REACT_APP_CRYPTO_KEY || '1234567890').toString()\r\nexport const decrypt = (ciphertext: string) => {\r\n  const bytes = CryptoJS.AES.decrypt(ciphertext, process.env.REACT_APP_CRYPTO_KEY || '1234567890')\r\n  return JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\r\n}\r\n\r\n// ---------------------- local storage --------------------------------------------------------------\r\nexport const setStorageItem = (key: string, data: any) => {\r\n  localStorage.setItem(config.appID + '_' + key, encrypt(JSON.stringify(data)))\r\n}\r\n\r\nexport const getStorageItem = (key: string, defaultVal: any) => {\r\n  try {\r\n    return JSON.parse(\r\n      decrypt(localStorage.getItem(config.appID + '_' + key) as string)\r\n    )\r\n  } catch (e) {\r\n    return defaultVal || false\r\n  }\r\n}\r\n\r\nexport const deleteStorageItem = (key: string) => {\r\n  localStorage.removeItem(config.appID + '_' + key)\r\n}\r\n","import Dashboard from 'pages/Admin/Dashboard'\r\nimport Login from 'pages/Admin/Login'\r\nimport Home from 'pages/Home'\r\nimport Mint from 'pages/Mint'\r\n\r\nconst routes: any[] = [\r\n  {\r\n    path: '/home',\r\n    component: Home\r\n  },\r\n  {\r\n    path: '/mint',\r\n    component: Mint\r\n  },\r\n  {\r\n    path: '/admin/login',\r\n    component: Login\r\n  },\r\n  {\r\n    path: '/admin/dashboard',\r\n    component: Dashboard\r\n  }\r\n]\r\n\r\nexport default routes\r\n","import { useEffect, useState } from 'react'\r\nimport Loader from 'components/Loader'\r\nimport { NotificationManager } from 'components/Notification'\r\nimport queryString from 'query-string'\r\nimport api from 'utils/api'\r\nimport { encrypt, decrypt, getStorageItem } from 'utils/helper'\r\nimport axios from 'axios'\r\n\r\ninterface Props {}\r\n\r\nconst Mint = (props: Props) => {\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n  const [username, setUsername] = useState('')\r\n  const [twitterLogin, setTwitterLogin] = useState<{\r\n    isLoggedIn: boolean,\r\n    profile: any\r\n  }>({\r\n    isLoggedIn: false,\r\n    profile: {}\r\n  })\r\n\r\n  const [discordLogin, setDiscordLogin] = useState({\r\n    isLoggedIn: false\r\n  })\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      const { oauth_token, oauth_verifier, code } = queryString.parse(window.location.search)\r\n      if (code) {\r\n        // Discord oAuth 2.0\r\n        try {\r\n          const {data: profile} = await api.post('/auth/discord/profile', {code})\r\n          setLoggedIn(true)\r\n          setUsername(profile.username)\r\n        } catch (error) {\r\n          console.error(error)\r\n        }\r\n      } else if (oauth_token && oauth_verifier) {\r\n        // Twitter oAuth 1.0\r\n        try {\r\n          // Oauth Step 3\r\n          // Authenticated Resource Access\r\n          const {data: profile} = await api.post('/auth/twitter/profile', {\r\n            oauth_token: getStorageItem('oauth_token', ''),\r\n            oauth_verifier\r\n          })\r\n\r\n          setLoggedIn(true)\r\n          setUsername(profile.name)\r\n          console.log(profile)\r\n        } catch (error) {\r\n          console.error(error)\r\n        }\r\n      } else {\r\n        // check if user is included in whitelist\r\n      }\r\n    })()\r\n  }, [])\r\n\r\n  return (\r\n    <div className='mint-page'>\r\n      {loggedIn && (<button type='button'>Confirm {username}</button>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Mint\r\n","import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport routes from './routes'\nimport {NotificationContainer} from 'components/Notification'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router>\n        <Switch>\n          {routes.map((e) => (\n            <Route key={e.path} path={e.path} exact component={e.component} />\n          ))}\n          <Redirect to='/home' />\n        </Switch>\n      </Router>\n      <NotificationContainer/>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { actionTypes } from 'utils/config'\r\n\r\nconst initialState = {\r\n  data: {} as any,\r\n}\r\n\r\nconst sample = (state = initialState, action: ActionType) => {\r\n  const { type, payload } = action\r\n  switch (type) {\r\n    case actionTypes.SAMPLE_ACTION: {\r\n      state = { ...state, data: payload }\r\n      break\r\n    }\r\n\r\n    default:\r\n      break\r\n  }\r\n\r\n  return state\r\n}\r\n\r\nexport default sample\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport sample from 'reducers/sample'\r\n\r\nconst store = createStore(combineReducers({sample}), applyMiddleware(thunkMiddleware))\r\n\r\nexport default store\r\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport 'react-notifications/lib/notifications.css'\nimport './styles/app.scss'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}